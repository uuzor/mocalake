import { AirService } from "@mocanetwork/airkit";
import { useState } from "react";
import type { EnvironmentConfig } from "../../config/environments";
import { generateJwt, getJwtPayload, EXAMPLE_JWKS_URL } from "../../utils";
import CollapsibleSection from "../CollapsibleSection";

// Environment variables for configuration
const LOCALE = import.meta.env.VITE_LOCALE || "en";

type JsonDocumentObject = Record<string, string | number | boolean>;

interface CredentialField {
  id: string;
  name: string;
  type: "string" | "number" | "boolean" | "date";
  value: string | number | boolean;
}

interface CredentialIssuanceProps {
  airService: AirService | null;
  isLoggedIn: boolean;
  partnerId: string;
  environmentConfig: EnvironmentConfig;
}

const CredentialIssuance = ({
  airService,
  isLoggedIn,
  partnerId,
  environmentConfig,
}: CredentialIssuanceProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedJwt, setGeneratedJwt] = useState<string>("");

  // Configuration - these would typically come from environment variables or API
  const [config, setConfig] = useState({
    issuerDid: import.meta.env.VITE_ISSUER_DID || "did:example:issuer123",
    credentialId:
      import.meta.env.VITE_CREDENTIAL_ID || "c21hc0g0joevn0015479aK",
  });

  const [privateKey, setPrivateKey] = useState(
    import.meta.env.VITE_PRIVATE_KEY || ""
  );

  // Dynamic credential subject fields
  const [credentialFields, setCredentialFields] = useState<CredentialField[]>([
    {
      id: "1",
      name: "age",
      type: "number",
      value: 20,
    },
  ]);

  const handleConfigChange = (field: string, value: string) => {
    setConfig((prev) => ({ ...prev, [field]: value }));
  };

  const addCredentialField = () => {
    const newField: CredentialField = {
      id: Date.now().toString(),
      name: "",
      type: "string",
      value: "",
    };
    setCredentialFields([...credentialFields, newField]);
  };

  const updateCredentialField = (id: string, field: Partial<CredentialField>) => {
    setCredentialFields(credentialFields.map((f) => (f.id === id ? { ...f, ...field } : f)));
  };

  const removeCredentialField = (id: string) => {
    setCredentialFields(credentialFields.filter((f) => f.id !== id));
  };

  const convertFieldsToCredentialSubject = (): JsonDocumentObject => {
    const subject: JsonDocumentObject = {};
    credentialFields.forEach((field) => {
      if (field.name.trim()) {
        let value: string | number | boolean = field.value;

        // Convert value based on type
        switch (field.type) {
          case "number":
            value = typeof field.value === "string" ? parseFloat(field.value) || 0 : field.value;
            break;
          case "boolean":
            value = typeof field.value === "string" ? field.value === "true" : field.value;
            break;
          case "date":
            if (typeof field.value === "string") {
              // Convert date string to YYYYMMDD format
              const date = new Date(field.value);
              if (!isNaN(date.getTime())) {
                value = parseInt(
                  date.getFullYear().toString() + (date.getMonth() + 1).toString().padStart(2, "0") + date.getDate().toString().padStart(2, "0")
                );
              }
            }
            break;
          default:
            value = field.value;
        }

        subject[field.name] = value;
      }
    });
    return subject;
  };

  const handleIssueCredential = async () => {
    setIsLoading(true);
    setError(null);
    setIsSuccess(false);

    try {
      const jwt =
        generatedJwt ||
        (await generateJwt({
          partnerId,
          privateKey,
        }));

      if (!jwt) {
        setError("Failed to generate JWT");
        setIsLoading(false);
        return;
      }
      const credentialSubject = convertFieldsToCredentialSubject();

      if (!airService) {
        setError(
          "AirService is not initialized. Please check your partner ID."
        );
        setIsLoading(false);
        return;
      }

      await airService.issueCredential({
        authToken: jwt,
        credentialId: config.credentialId,
        credentialSubject: credentialSubject,
        issuerDid: config.issuerDid,
      });

      setIsSuccess(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
      setIsLoading(false);
    }
  };

  const handleGenerateJwt = async () => {
    setError(null);
    try {
      const jwt = await generateJwt({ partnerId, privateKey });
      if (!jwt) {
        setError("Failed to generate JWT");
        setGeneratedJwt("");
        return;
      }
      setGeneratedJwt(jwt);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred");
      setGeneratedJwt("");
    }
  };

  const handleReset = () => {
    setIsSuccess(false);
    setError(null);
  };